name: Pubby.co Login, Browse & Pick Kindle Unlimited Book & View On Amazon Automation

on:
  schedule:
    - cron: '*/10 * * * *'   # every 10 minutes
  workflow_dispatch:

jobs:
  login-pubby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install puppeteer puppeteer-core puppeteer-extra puppeteer-extra-plugin-stealth fs

      - name: Create Puppeteer script for Login, Browse & Debug "View On Amazon"
        run: |
          mkdir -p scripts screenshots
          cat > scripts/pubby-login-and-browse.js << 'EOL'
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');
          puppeteer.use(StealthPlugin());

          function sleep(ms) { return new Promise(r => setTimeout(r, ms)); }
          async function safeScreenshot(page, path) {
            try { await page.screenshot({ path, fullPage: true }); console.log(`Screenshot taken: ${path}`); }
            catch (e) { console.error(`Screenshot error: ${e.message}`); }
          }

          async function loginAndBrowse(loginUrl, browseUrl, username, password) {
            let browser, page;
            try {
              browser = await puppeteer.launch({
                headless: 'new',
                defaultViewport: null,
                args: ['--no-sandbox','--disable-setuid-sandbox','--start-maximized']
              });
              page = await browser.newPage();
              await page.setViewport({ width: 1920, height: 1080 });

              // login
              console.log("Navigating to login page:", loginUrl);
              await page.goto(loginUrl, { waitUntil: 'networkidle2', timeout: 60000 });
              await safeScreenshot(page, `screenshots/pubby_home_${Date.now()}.png`);
              await page.type('input[name="email"]', username, { delay: 100 });
              await page.type('input[name="password"]', password, { delay: 100 });
              await safeScreenshot(page, `screenshots/pubby_credentials_filled_${Date.now()}.png`);
              console.log("Submitting login form...");
              await Promise.all([
                page.click('button[type="submit"]'),
                page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 })
              ]);
              await safeScreenshot(page, `screenshots/pubby_after_login_${Date.now()}.png`);

              // verify
              const dash = await page.$('a.logout, .dashboard');
              if (!dash) {
                console.warn("Login may have failed.");
                await safeScreenshot(page, `screenshots/pubby_login_failed_${Date.now()}.png`);
              }

              // browse
              console.log("Navigating to browse page:", browseUrl);
              await page.goto(browseUrl, { waitUntil: 'networkidle2', timeout: 60000 });
              await sleep(10000);
              await safeScreenshot(page, `screenshots/pubby_browse_${Date.now()}.png`);

              // filters
              console.log("Applying Kindle Unlimited + Most Snaps filters...");
              await page.evaluate(() => {
                const tags = Array.from(document.querySelectorAll('.browsing-tag'));
                const ku = tags.find(t => t.querySelector('.label')?.innerText.trim() === 'Kindle Unlimited');
                if (ku) ku.click();
              });
              await sleep(5000);
              await safeScreenshot(page, `screenshots/pubby_kindle_unlimited_${Date.now()}.png`);
              await page.evaluate(() => {
                const tags = Array.from(document.querySelectorAll('.browsing-tag'));
                const snaps = tags.find(t => t.querySelector('.label')?.innerText.trim() === 'Most Snaps');
                if (snaps) snaps.click();
              });
              await sleep(5000);
              await safeScreenshot(page, `screenshots/pubby_most_snaps_${Date.now()}.png`);

              // load books
              await page.waitForSelector('.library-books-container', { visible: true, timeout: 60000 });
              await safeScreenshot(page, `screenshots/pubby_browse_loaded_${Date.now()}.png`);
              await sleep(5000);
              for (let i = 0; i < 3; i++) {
                console.log(`Scrolling iteration ${i+1}`);
                await page.evaluate(() => window.scrollBy(0, window.innerHeight));
                await sleep(3000);
                await safeScreenshot(page, `screenshots/pubby_scroll_${i+1}_${Date.now()}.png`);
              }

              // pick book
              console.log("Picking first Kindle Unlimited book...");
              const kuEls = await page.$x("//div[contains(@class,'card') and .//span[contains(@class,'verified-price') and normalize-space(text())='Kindle Unlimited']]");
              if (kuEls.length) { await kuEls[0].click(); await sleep(2000); await safeScreenshot(page, `screenshots/pubby_ku_card_clicked_${Date.now()}.png`); }
              const pickEls = await page.$x("//div[contains(@class,'action-blue') and normalize-space(text())='Pick Book']");
              if (pickEls.length) { await pickEls[0].click(); await sleep(2000); await safeScreenshot(page, `screenshots/pubby_pick_book_clicked_${Date.now()}.png`); }

              // debug "View On Amazon"
              console.log("Clicking 'View On Amazon'…");
              // 1) generous timeouts
              page.setDefaultNavigationTimeout(120000);
              page.setDefaultTimeout(120000);
              // 2) network logging
              page.on('request', req => console.log('▶︎', req.method(), req.url()));
              page.on('response', res => console.log('◀︎', res.status(), res.url()));
              // 3) capture new tabs
              browser.on('targetcreated', async target => {
                if (target.type() === 'page') {
                  const newPage = await target.page();
                  console.log('New tab URL:', newPage.url());
                  await newPage.waitForNavigation({ waitUntil: 'networkidle2', timeout: 120000 }).catch(()=>{});
                  await newPage.screenshot({ path: `screenshots/amazon_newtab_${Date.now()}.png`, fullPage: true });
                  console.log(await newPage.content());
                }
              });
              // 4) dump button HTML
              const amazonBtn = await page.$('.action.copy-amazon-link');
              console.log('Amazon button HTML:', amazonBtn ? await page.evaluate(el=>el.outerHTML, amazonBtn) : 'not found');
              // 5) pre-click screenshot
              await safeScreenshot(page, `screenshots/pre_amazon_click_${Date.now()}.png`);
              // 6) attempt click + nav
              try {
                await Promise.all([
                  page.click('.action.copy-amazon-link'),
                  page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 120000 })
                ]);
              } catch (navErr) {
                console.warn('nav timeout or new tab likely:', navErr.message);
              }
              // 7) log current URL
              console.log('After click page.url():', page.url());
              // 8) fallback direct goto
              if (!page.url().includes('amazon.')) {
                const fallback = amazonBtn
                  ? await page.evaluate(el=>el.getAttribute('data-clipboard-text')||el.dataset.link, amazonBtn)
                  : null;
                console.log('Fallback URL:', fallback);
                if (fallback) {
                  await page.goto(fallback, { waitUntil: 'networkidle2', timeout: 120000 });
                }
              }
              // final screenshot + HTML
              await safeScreenshot(page, `screenshots/pubby_view_amazon_${Date.now()}.png`);
              console.log('--- AMAZON PAGE HTML START ---');
              console.log(await page.content());
              console.log('--- AMAZON PAGE HTML END ---');

            } catch (err) {
              console.error("Script error:", err.message);
            } finally {
              if (page) {
                try {
                  fs.writeFileSync(
                    `screenshots/pubby_final_page_${Date.now()}.html`,
                    await page.content()
                  );
                } catch {}
              }
              if (browser) await browser.close();
            }
          }

          (async () => {
            const loginUrl = process.env.PUBBY_LOGIN_URL;
            const browseUrl = process.env.PUBBY_BROWSE_URL;
            const username = process.env.PUBBY_USERNAME;
            const password = process.env.PUBBY_PASSWORD;
            if (!username || !password) {
              console.error("Missing credentials"); process.exit(1);
            }
            await loginAndBrowse(loginUrl, browseUrl, username, password);
          })();
          EOL

      - name: Run Puppeteer script
        env:
          PUBBY_LOGIN_URL: "https://account.pubby.co/login"
          PUBBY_BROWSE_URL: "https://app.pubby.co/#/browse"
          PUBBY_USERNAME: ${{ secrets.PUBBY_USERNAME }}
          PUBBY_PASSWORD: ${{ secrets.PUBBY_PASSWORD }}
        run: |
          echo "Logging in to: $PUBBY_LOGIN_URL and navigating to: $PUBBY_BROWSE_URL"
          node scripts/pubby-login-and-browse.js | tee script_output.log

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pubby-debug-artifacts
          path: |
            screenshots/
            *.log
          retention-days: 7
