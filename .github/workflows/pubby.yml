name: Pubby.co Login, Browse & Pick Kindle Unlimited Book & View On Amazon Automation

on:
  schedule:
    - cron: '*/10 * * * *'   # every 10 minutes
  workflow_dispatch:

jobs:
  login-pubby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install puppeteer puppeteer-core puppeteer-extra puppeteer-extra-plugin-stealth fs

      - name: Create Puppeteer script for Login, Browse & Pick Kindle Unlimited Book & View On Amazon
        run: |
          mkdir -p scripts screenshots
          cat > scripts/pubby-login-and-browse.js << 'EOL'
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');
          puppeteer.use(StealthPlugin());

          function sleep(ms) {
            return new Promise(r => setTimeout(r, ms));
          }

          async function safeScreenshot(page, path) {
            try {
              await page.screenshot({ path });
              console.log(`Screenshot taken: ${path}`);
            } catch (e) {
              console.error(`Screenshot error: ${e.message}`);
            }
          }

          async function loginAndBrowse(loginUrl, browseUrl, username, password) {
            let browser, page;
            try {
              // Launch maximized
              browser = await puppeteer.launch({
                headless: 'new',
                defaultViewport: null,
                args: ['--no-sandbox','--disable-setuid-sandbox','--start-maximized']
              });
              page = await browser.newPage();
              await page.setViewport({ width: 1920, height: 1080 });

              // 1. Login
              console.log("Navigating to login page:", loginUrl);
              await page.goto(loginUrl, { waitUntil: 'networkidle2', timeout: 60000 });
              await safeScreenshot(page, `screenshots/pubby_home_${Date.now()}.png`);

              console.log("Filling in login credentials...");
              await page.type('input[name="email"]', username, { delay: 100 });
              await page.type('input[name="password"]', password, { delay: 100 });
              await safeScreenshot(page, `screenshots/pubby_credentials_filled_${Date.now()}.png`);

              console.log("Submitting login form...");
              await Promise.all([
                page.click('button[type="submit"]'),
                page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 })
              ]);
              await safeScreenshot(page, `screenshots/pubby_after_login_${Date.now()}.png`);

              // 2. Verify login
              const dash = await page.$('a.logout, .dashboard');
              if (!dash) {
                console.warn("Login may have failed.");
                await safeScreenshot(page, `screenshots/pubby_login_failed_${Date.now()}.png`);
              }

              // 3. Browse
              console.log("Navigating to browse page:", browseUrl);
              await page.goto(browseUrl, { waitUntil: 'networkidle2', timeout: 60000 });
              await sleep(10000);
              await safeScreenshot(page, `screenshots/pubby_browse_${Date.now()}.png`);

              // 4. Filters
              console.log("Clicking 'Kindle Unlimited' filter…");
              await page.evaluate(() => {
                const tag = [...document.querySelectorAll('.browsing-tag')]
                  .find(t => t.querySelector('.label')?.innerText.trim() === 'Kindle Unlimited');
                if (tag) tag.click();
              });
              await sleep(5000);
              await safeScreenshot(page, `screenshots/pubby_kindle_unlimited_${Date.now()}.png`);

              console.log("Clicking 'Most Snaps' filter…");
              await page.evaluate(() => {
                const tag = [...document.querySelectorAll('.browsing-tag')]
                  .find(t => t.querySelector('.label')?.innerText.trim() === 'Most Snaps');
                if (tag) tag.click();
              });
              await sleep(5000);
              await safeScreenshot(page, `screenshots/pubby_most_snaps_${Date.now()}.png`);

              // 5. Load books
              await page.waitForSelector('.library-books-container', { visible: true, timeout: 60000 });
              await safeScreenshot(page, `screenshots/pubby_browse_loaded_${Date.now()}.png`);
              await sleep(5000);
              for (let i = 0; i < 3; i++) {
                console.log(`Scrolling iteration ${i+1}`);
                await page.evaluate(() => window.scrollBy(0, window.innerHeight));
                await sleep(3000);
                await safeScreenshot(page, `screenshots/pubby_scroll_${i+1}_${Date.now()}.png`);
              }

              // 6. Extract titles & timeline
              console.log("Extracting Recommended Books…");
              const recommended = await page.evaluate(() =>
                [...document.querySelectorAll('.library-books-container .card .title-text')].map(el => el.innerText.trim())
              );
              console.log("Recommended Books:", recommended);
              await safeScreenshot(page, `screenshots/pubby_books_extracted_${Date.now()}.png`);

              console.log("Extracting Activity Timeline…");
              const timeline = await page.evaluate(() =>
                [...document.querySelectorAll('.timeline .event')].map(ev => ({
                  content: ev.querySelector('.content')?.innerText.trim() || '',
                  time: ev.querySelector('.time')?.innerText.trim() || ''
                }))
              );
              console.log("Activity Timeline:", timeline);
              await safeScreenshot(page, `screenshots/pubby_activity_extracted_${Date.now()}.png`);

              // 7. Pick KU book
              console.log("Scanning for Kindle Unlimited cards…");
              const kuEls = await page.$$("//div[contains(@class,'card') and .//span[contains(@class,'verified-price') and normalize-space(text())='Kindle Unlimited']]");
              if (kuEls.length) {
                await kuEls[0].click();
                await sleep(2000);
                await safeScreenshot(page, `screenshots/pubby_ku_card_clicked_${Date.now()}.png`);
                console.log("Clicking 'Pick Book'…");
                const pickEls = await page.$$("//div[contains(@class,'action-blue') and normalize-space(text())='Pick Book']");
                if (pickEls.length) {
                  await pickEls[0].click();
                  await sleep(2000);
                  await safeScreenshot(page, `screenshots/pubby_pick_book_clicked_${Date.now()}.png`);
                }
              }

              // 8. Reader
              console.log("Clicking 'Reader' tab…");
              await page.evaluate(() => {
                const tab = [...document.querySelectorAll('.section-container .section-label')]
                  .find(el => el.innerText.trim() === 'Reader');
                if (tab) tab.click();
              });

              console.log("Waiting for current page label…");
              await page.waitForSelector('.section-container .pages-container .page-label.current-page', { visible: true, timeout: 60000 });
              await safeScreenshot(page, `screenshots/pubby_reader_loaded_${Date.now()}.png`);

              console.log("Clicking current page in Reader…");
              await page.click('.section-container .pages-container .page-label.current-page');
              await sleep(2000);
              await safeScreenshot(page, `screenshots/pubby_reader_clicked_${Date.now()}.png`);

              // 9. View On Amazon + follow
              console.log("Waiting for 'View On Amazon' button…");
              await page.waitForSelector('.action.copy-amazon-link', { visible: true, timeout: 60000 });
              await safeScreenshot(page, `screenshots/pubby_before_amazon_${Date.now()}.png`);

              console.log("Clicking 'View On Amazon' and navigating…");
              await Promise.all([
                page.click('.action.copy-amazon-link'),
                page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 })
              ]);
              await safeScreenshot(page, `screenshots/pubby_amazon_page_${Date.now()}.png`);

              console.log("Amazon page HTML content:");
              const amazonHtml = await page.content();
              console.log(amazonHtml);

            } catch (err) {
              console.error("Script error:", err.message);
            } finally {
              if (page) {
                try {
                  fs.writeFileSync(
                    `screenshots/pubby_final_page_${Date.now()}.html`,
                    await page.content()
                  );
                } catch {}
              }
              if (browser) await browser.close();
            }
          }

          (async () => {
            const loginUrl = process.env.PUBBY_LOGIN_URL;
            const browseUrl = process.env.PUBBY_BROWSE_URL;
            const username = process.env.PUBBY_USERNAME;
            const password = process.env.PUBBY_PASSWORD;
            if (!username || !password) {
              console.error("Missing credentials");
              process.exit(1);
            }
            await loginAndBrowse(loginUrl, browseUrl, username, password);
          })();
          EOL

      - name: Run Puppeteer script
        env:
          PUBBY_LOGIN_URL: "https://account.pubby.co/login"
          PUBBY_BROWSE_URL: "https://app.pubby.co/#/browse"
          PUBBY_USERNAME: ${{ secrets.PUBBY_USERNAME }}
          PUBBY_PASSWORD: ${{ secrets.PUBBY_PASSWORD }}
        run: |
          echo "Logging in to: $PUBBY_LOGIN_URL and navigating to: $PUBBY_BROWSE_URL"
          node scripts/pubby-login-and-browse.js | tee script_output.log

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pubby-debug-artifacts
          path: |
            screenshots/
            *.log
          retention-days: 7
