name: Pubby.co Login, Browse & Pick Kindle Unlimited Book Automation

on:
  schedule:
    - cron: '*/10 * * * *'
  workflow_dispatch:

jobs:
  login-pubby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install puppeteer puppeteer-core puppeteer-extra puppeteer-extra-plugin-stealth fs

      - name: Create Puppeteer script for Login, Browse & Pick Kindle Unlimited Book
        run: |
          mkdir -p scripts screenshots
          cat > scripts/pubby-login-and-browse.js << 'EOL'
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');

          puppeteer.use(StealthPlugin());

          function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
          }

          async function safeScreenshot(page, path) {
            try {
              await page.screenshot({ path });
              console.log(`Screenshot taken: ${path}`);
            } catch (err) {
              console.error(`Failed to take screenshot ${path}: ${err.message}`);
            }
          }

          async function loginAndBrowse(loginUrl, browseUrl, username, password) {
            let browser, page;
            try {
              console.log("Launching browser...");
              browser = await puppeteer.launch({
                headless: "new",
                args: ['--no-sandbox','--disable-setuid-sandbox']
              });
              page = await browser.newPage();

              // Stage 1: Login
              console.log("Navigating to login page:", loginUrl);
              await page.goto(loginUrl, { waitUntil: 'networkidle2', timeout: 60000 });
              await safeScreenshot(page, `./screenshots/pubby_home_${Date.now()}.png`);

              console.log("Filling in login credentials...");
              await page.type('input[name="email"]', username, { delay: 100 });
              await page.type('input[name="password"]', password, { delay: 100 });
              await safeScreenshot(page, `./screenshots/pubby_credentials_filled_${Date.now()}.png`);

              console.log("Submitting login form...");
              await Promise.all([
                page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 }),
                page.click('button[type="submit"]')
              ]);
              await safeScreenshot(page, `./screenshots/pubby_after_login_${Date.now()}.png`);

              // Stage 4: Verify login
              console.log("Verifying login status...");
              const dashboard = await page.$('a.logout, .dashboard');
              if (!dashboard) {
                console.warn("Login may have failed.");
                await safeScreenshot(page, `./screenshots/pubby_login_failed_${Date.now()}.png`);
              }

              // Stage 5: Browse page
              console.log("Navigating to browse page:", browseUrl);
              await page.goto(browseUrl, { waitUntil: 'networkidle2', timeout: 60000 });
              await sleep(10000);
              await safeScreenshot(page, `./screenshots/pubby_browse_${Date.now()}.png`);

              // Stage 5.5: Click Kindle Unlimited
              console.log("Clicking 'Kindle Unlimited' filter…");
              const kuClicked = await page.evaluate(() => {
                const tag = Array.from(document.querySelectorAll('.browsing-tag'))
                  .find(t => t.querySelector('.label')?.innerText.trim() === 'Kindle Unlimited');
                if (tag) { tag.click(); return true; }
                return false;
              });
              if (!kuClicked) console.error("Could not find Kindle Unlimited filter");
              await sleep(5000);
              await safeScreenshot(page, `./screenshots/pubby_kindle_unlimited_${Date.now()}.png`);

              // Stage 5.6: Click Most Snaps
              console.log("Clicking 'Most Snaps' filter…");
              const snapsClicked = await page.evaluate(() => {
                const tag = Array.from(document.querySelectorAll('.browsing-tag'))
                  .find(t => t.querySelector('.label')?.innerText.trim() === 'Most Snaps');
                if (tag) { tag.click(); return true; }
                return false;
              });
              if (!snapsClicked) console.error("Could not find Most Snaps filter");
              await sleep(5000);
              await safeScreenshot(page, `./screenshots/pubby_most_snaps_${Date.now()}.png`);

              // Stage 6: Wait for books container
              console.log("Waiting for books container…");
              await page.waitForSelector('.library-books-container', { visible: true, timeout: 60000 });
              await safeScreenshot(page, `./screenshots/pubby_browse_loaded_${Date.now()}.png`);
              await sleep(5000);

              // Stage 7: Scroll to load more
              for (let i = 0; i < 3; i++) {
                console.log(`Scrolling iteration ${i+1}`);
                await page.evaluate(() => window.scrollBy(0, window.innerHeight));
                await sleep(3000);
                await safeScreenshot(page, `./screenshots/pubby_scroll_${i+1}_${Date.now()}.png`);
              }

              // Stage 8: Extract Recommended Titles
              console.log("Extracting Recommended Books…");
              const recommendedBooks = await page.evaluate(() => {
                return Array.from(
                  document.querySelectorAll('.library-books-container .card .title-text')
                ).map(el => el.innerText.trim());
              });
              console.log("Recommended Books:", recommendedBooks);
              await safeScreenshot(page, `./screenshots/pubby_books_extracted_${Date.now()}.png`);

              // Stage 9: Extract Timeline
              console.log("Extracting Activity Timeline…");
              const activityTimeline = await page.evaluate(() => {
                return Array.from(document.querySelectorAll('.timeline .event')).map(ev => ({
                  content: ev.querySelector('.content')?.innerText.trim() || '',
                  time: ev.querySelector('.time')?.innerText.trim() || ''
                }));
              });
              console.log("Activity Timeline:", activityTimeline);
              await safeScreenshot(page, `./screenshots/pubby_activity_extracted_${Date.now()}.png`);

              // Stage 10: Pick a Kindle Unlimited card
              console.log("Scanning for Kindle Unlimited cards…");
              const kuCardHandle = await page.evaluateHandle(xpath => {
                const nodes = [];
                const result = document.evaluate(
                  xpath, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null
                );
                for (let i = 0; i < result.snapshotLength; i++) {
                  nodes.push(result.snapshotItem(i));
                }
                return nodes;
              }, "//div[contains(@class,'card') and .//span[contains(@class,'verified-price') and normalize-space(text())='Kindle Unlimited']]");
              const kuProps = await kuCardHandle.getProperties();
              const kuElements = [];
              for (const p of kuProps.values()) {
                const el = p.asElement();
                if (el) kuElements.push(el);
              }
              if (kuElements.length > 0) {
                console.log("Found KU card—clicking…");
                await kuElements[0].click();
                await sleep(2000);
                await safeScreenshot(page, `./screenshots/pubby_ku_card_clicked_${Date.now()}.png`);

                console.log("Looking for 'Pick Book' button…");
                const pickHandle = await page.evaluateHandle(xpath => {
                  const nodes = [];
                  const res = document.evaluate(
                    xpath, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null
                  );
                  for (let i = 0; i < res.snapshotLength; i++) {
                    nodes.push(res.snapshotItem(i));
                  }
                  return nodes;
                }, "//div[contains(@class,'action-blue') and normalize-space(text())='Pick Book']");
                const pickProps = await pickHandle.getProperties();
                const pickEls = [];
                for (const p of pickProps.values()) {
                  const e = p.asElement();
                  if (e) pickEls.push(e);
                }
                if (pickEls.length > 0) {
                  console.log("Clicking 'Pick Book'…");
                  await pickEls[0].click();
                  await sleep(2000);
                  await safeScreenshot(page, `./screenshots/pubby_pick_book_clicked_${Date.now()}.png`);
                } else {
                  console.warn("No 'Pick Book' button found.");
                }
              } else {
                console.warn("No Kindle Unlimited card found.");
              }

            } catch (err) {
              console.error("Script error:", err.message);
            } finally {
              if (page) {
                try {
                  console.log("Saving final HTML…");
                  const html = await page.content();
                  fs.writeFileSync(`./screenshots/pubby_final_page_${Date.now()}.html`, html);
                } catch {}
              }
              if (browser) await browser.close();
            }
          }

          (async () => {
            const loginUrl = process.env.PUBBY_LOGIN_URL;
            const browseUrl = process.env.PUBBY_BROWSE_URL;
            const username = process.env.PUBBY_USERNAME;
            const password = process.env.PUBBY_PASSWORD;
            if (!username || !password) { console.error("Missing credentials"); process.exit(1); }
            await loginAndBrowse(loginUrl, browseUrl, username, password);
          })();
          EOL

      - name: Run Puppeteer script
        env:
          PUBBY_LOGIN_URL: "https://account.pubby.co/login"
          PUBBY_BROWSE_URL: "https://app.pubby.co/#/browse"
          PUBBY_USERNAME: ${{ secrets.PUBBY_USERNAME }}
          PUBBY_PASSWORD: ${{ secrets.PUBBY_PASSWORD }}
        run: |
          echo "Logging in to: $PUBBY_LOGIN_URL and navigating to: $PUBBY_BROWSE_URL"
          node scripts/pubby-login-and-browse.js | tee script_output.log

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pubby-debug-artifacts
          path: |
            screenshots/
            *.log
          retention-days: 7
