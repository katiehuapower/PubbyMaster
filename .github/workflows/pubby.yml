name: Pubby.co Login, Browse & Pick Kindle Unlimited Book & View On Amazon Automation

on:
  schedule:
    - cron: '*/10 * * * *'   # every 10 minutes
  workflow_dispatch:

jobs:
  login-pubby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install puppeteer puppeteer-core puppeteer-extra puppeteer-extra-plugin-stealth fs

      - name: Create Puppeteer script for Login, Browse & Pick Kindle Unlimited Book & View On Amazon (extensive debug)
        run: |
          mkdir -p scripts screenshots debug
          cat << 'EOF' > scripts/pubby-login-and-browse.js
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');
          puppeteer.use(StealthPlugin());

          function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
          }

          async function safeScreenshot(page, path) {
            try {
              await page.screenshot({ path, fullPage: true });
              console.log("Screenshot taken:", path);
            } catch (e) {
              console.error("Screenshot error:", e.message);
            }
          }

          async function dumpPageInfo(page, label) {
            try {
              console.log("[" + label + "] URL:", page.url());
              const html = await page.content();
              const filename = "debug/" + label.replace(/\s+/g, "_") + "_" + Date.now() + ".html";
              fs.writeFileSync(filename, html);
              console.log("[" + label + "] HTML dumped to", filename);
              const cookies = await page.cookies();
              console.log("[" + label + "] Cookies:", cookies);
            } catch (e) {
              console.error("Error dumping page info for", label + ":", e.message);
            }
          }

          async function loginAndBrowse(loginUrl, browseUrl, username, password) {
            let browser, page;
            try {
              browser = await puppeteer.launch({
                headless: 'new',
                defaultViewport: null,
                args: ['--no-sandbox', '--disable-setuid-sandbox', '--start-maximized']
              });
              page = await browser.newPage();
              await page.setViewport({ width: 1920, height: 1080 });

              // … Stages 1–11 unchanged …

              // Stage 12: View On Amazon (enumerate pages + HTML dump)
              console.log("=== STAGE 12: View On Amazon DEBUG START ===");
              await dumpPageInfo(page, "before_click");
              await page.waitForSelector('.action.copy-amazon-link', { visible: true, timeout: 60000 });
              await safeScreenshot(page, "screenshots/pubby_before_amazon_" + Date.now() + ".png");

              try {
                // Click the button
                await page.click('.action.copy-amazon-link');
                // Give the new tab a moment to open
                await sleep(2000);

                // Find the Amazon page among all open pages
                const pages = await browser.pages();
                const amazonPage = pages.find(p => p.url().includes('amazon.co'));
                if (!amazonPage) throw new Error("Could not find Amazon tab after click");

                console.log("Stage 12: Found Amazon page:", amazonPage.url());
                await dumpPageInfo(amazonPage, "amazon_tab_before_nav");

                // **New: dump HTML right after landing on Amazon**
                await dumpPageInfo(amazonPage, "amazon_tab_after_nav");

                await amazonPage.bringToFront();
                await amazonPage.waitForSelector('#productTitle', { timeout: 90000 });
                await safeScreenshot(amazonPage, "screenshots/pubby_amazon_tab_" + Date.now() + ".png");
                console.log("=== STAGE 12: View On Amazon DEBUG SUCCESS ===");
              } catch (stageErr) {
                console.error("!!! ERROR in STAGE 12 DEBUG !!!", stageErr);
                await dumpPageInfo(page, "stage12_error_page");
                await safeScreenshot(page, "screenshots/pubby_amazon_error_" + Date.now() + ".png");
                console.log("Stage 12: Targets after error:");
                (await browser.targets()).forEach((t, i) =>
                  console.log("  [" + i + "] type=" + t.type() + " url=" + t.url())
                );
              }
            } catch (err) {
              console.error("Script-level error:", err);
            } finally {
              if (page) {
                try {
                  const finalHtml = await page.content();
                  fs.writeFileSync("debug/final_page_" + Date.now() + ".html", finalHtml);
                } catch {}
              }
              if (browser) await browser.close();
            }
          }

          (async () => {
            const loginUrl  = process.env.PUBBY_LOGIN_URL;
            const browseUrl = process.env.PUBBY_BROWSE_URL;
            const username  = process.env.PUBBY_USERNAME;
            const password  = process.env.PUBBY_PASSWORD;
            if (!username || !password) {
              console.error("Missing credentials");
              process.exit(1);
            }
            await loginAndBrowse(loginUrl, browseUrl, username, password);
          })();
          EOF

      - name: Run Puppeteer script
        env:
          PUBBY_LOGIN_URL: "https://account.pubby.co/login"
          PUBBY_BROWSE_URL: "https://app.pubby.co/#/browse"
          PUBBY_USERNAME: ${{ secrets.PUBBY_USERNAME }}
          PUBBY_PASSWORD: ${{ secrets.PUBBY_PASSWORD }}
        run: |
          echo "Starting debug run at $(date)"
          node scripts/pubby-login-and-browse.js | tee debug/script_output.log

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pubby-debug-artifacts
          path: |
            screenshots/
            debug/
            debug/script_output.log
          retention-days: 7
