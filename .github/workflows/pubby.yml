name: Pubby.co Login, Browse & Pick Kindle Unlimited Book Automation (Most Snaps)

on:
  schedule:
    - cron: '*/10 * * * *'  # Run every 10 minutes
  workflow_dispatch:

jobs:
  login-pubby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install puppeteer puppeteer-core puppeteer-extra puppeteer-extra-plugin-stealth fs

      - name: Create Puppeteer script for Login, Browse & Pick Kindle Unlimited Book (Most Snaps)
        run: |
          mkdir -p scripts screenshots
          cat > scripts/pubby-login-and-browse.js << 'EOL'
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');

          puppeteer.use(StealthPlugin());

          // Helper sleep function.
          function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
          }

          // Helper function to safely take a screenshot.
          async function safeScreenshot(page, path) {
            try {
              await page.screenshot({ path });
              console.log(`Screenshot taken: ${path}`);
            } catch (err) {
              console.error(`Failed to take screenshot ${path}: ${err.message}`);
            }
          }

          async function loginAndBrowse(loginUrl, browseUrl, username, password) {
            let browser, page;
            try {
              console.log("Launching browser...");
              browser = await puppeteer.launch({
                headless: "new",
                args: [
                  '--no-sandbox',
                  '--disable-setuid-sandbox'
                ]
              });
              page = await browser.newPage();

              // Stage 1: Navigate to the login page.
              console.log("Navigating to login page:", loginUrl);
              await page.goto(loginUrl, { waitUntil: 'networkidle2', timeout: 60000 });
              await safeScreenshot(page, `./screenshots/pubby_home_${Date.now()}.png`);

              // Stage 2: Fill in the login form.
              console.log("Filling in login credentials...");
              await page.type('input[name="email"]', username, { delay: 100 });
              await page.type('input[name="password"]', password, { delay: 100 });
              await safeScreenshot(page, `./screenshots/pubby_credentials_filled_${Date.now()}.png`);

              // Stage 3: Submit the login form.
              console.log("Clicking the login button...");
              await Promise.all([
                page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 }),
                page.click('button[type="submit"]')
              ]);
              await safeScreenshot(page, `./screenshots/pubby_after_login_${Date.now()}.png`);

              // Stage 4: Verify login status.
              console.log("Verifying login status...");
              const dashboard = await page.$('a.logout, .dashboard');
              if (dashboard) {
                console.log("Login successful.");
              } else {
                console.warn("Login may have failed. Dashboard element not found.");
                await safeScreenshot(page, `./screenshots/pubby_login_failed_${Date.now()}.png`);
              }

              // Stage 5: Navigate to the browse page.
              console.log("Navigating to browse page:", browseUrl);
              await page.goto(browseUrl, { waitUntil: 'networkidle2', timeout: 60000 });
              // Wait for 10 seconds before making pubby browse screenshot.
              await sleep(10000);
              await safeScreenshot(page, `./screenshots/pubby_browse_${Date.now()}.png`);

              // Stage 5.5: Click the "Kindle Unlimited" filter button.
              console.log("Attempting to locate the 'Kindle Unlimited' filter button...");
              const kindleUnlimitedFilterClicked = await page.evaluate(() => {
                const tags = Array.from(document.querySelectorAll('.Browse-tag'));
                const kindleUnlimitedTag = tags.find(tag => tag.innerText.trim() === "Kindle Unlimited");
                if (kindleUnlimitedTag) {
                  console.log("'Kindle Unlimited' filter button found. Clicking it...");
                  kindleUnlimitedTag.click();
                  return true;
                } else {
                  console.log("'Kindle Unlimited' filter button NOT found.");
                  return false;
                }
              });
              if (kindleUnlimitedFilterClicked) {
                console.log("'Kindle Unlimited' filter button clicked successfully. Waiting for page update...");
              } else {
                console.error("ERROR: 'Kindle Unlimited' filter button was not found on the page.");
              }
              // Wait for 5 seconds after clicking filter.
              await sleep(5000);
              await safeScreenshot(page, `./screenshots/pubby_kindle_unlimited_filter_clicked_${Date.now()}.png`);

              // Stage 5.6: Click the "Most Snaps" filter button.
              console.log("Attempting to locate the 'Most Snaps' filter button...");
              const mostSnapsFilterClicked = await page.evaluate(() => {
                const tags = Array.from(document.querySelectorAll('.Browse-tag'));
                const mostSnapsTag = tags.find(tag => tag.innerText.trim() === "Most Snaps");
                if (mostSnapsTag) {
                  console.log("'Most Snaps' filter button found. Clicking it...");
                  mostSnapsTag.click();
                  return true;
                } else {
                  console.log("'Most Snaps' filter button NOT found.");
                  return false;
                }
              });
              if (mostSnapsFilterClicked) {
                console.log("'Most Snaps' filter button clicked successfully. Waiting for page update...");
              } else {
                console.error("ERROR: 'Most Snaps' filter button was not found on the page.");
              }
              // Wait for 10 seconds after clicking Most Snaps filter.
              await sleep(10000);
              await safeScreenshot(page, `./screenshots/pubby_most_snaps_filter_clicked_${Date.now()}.png`);

              // Stage 6: Wait for the books container to be visible.
              console.log("Waiting for the books container to appear...");
              await page.waitForSelector('.library-books-container', { visible: true, timeout: 60000 });
              console.log("Books container loaded.");
              await safeScreenshot(page, `./screenshots/pubby_browse_loaded_${Date.now()}.png`);

              // Extended wait to ensure content loads.
              console.log("Extended wait for content...");
              await sleep(5000);

              // Stage 7: Scroll down multiple times to load more books.
              for (let i = 0; i < 3; i++) {
                console.log(`Scrolling down, iteration ${i+1}`);
                await page.evaluate(() => {
                  window.scrollBy(0, window.innerHeight);
                });
                await sleep(3000);
                await safeScreenshot(page, `./screenshots/pubby_scroll_${i+1}_${Date.now()}.png`);
              }

              // Stage 8: Extract Recommended Books (Kindle Unlimited, Most Snaps).
              console.log("Extracting Recommended Books (Kindle Unlimited, Most Snaps)...");
              const recommendedBooks = await page.evaluate(() => {
                const books = [];
                // Adjusted selector to look for 'card' elements that might contain relevant book titles
                // You may need to refine this selector based on how Kindle Unlimited/Most Snaps books are displayed
                document.querySelectorAll('.library-books-container .card').forEach(card => {
                  const titleElement = card.querySelector('.title, .book-title'); // Look for common title selectors
                  if (titleElement && titleElement.innerText.trim().length > 0) {
                    books.push(titleElement.innerText.trim());
                  }
                });
                return books;
              });
              console.log("Final Recommended Books:", recommendedBooks);
              await safeScreenshot(page, `./screenshots/pubby_books_extracted_${Date.now()}.png`);

              // Stage 9: Extract Activity Timeline (using the original selector).
              console.log("Extracting Activity Timeline...");
              const activityTimeline = await page.evaluate(() => {
                const events = [];
                document.querySelectorAll('.timeline .event').forEach(event => {
                  const contentEl = event.querySelector('.content');
                  const timeEl = event.querySelector('.time');
                  events.push({
                    content: contentEl ? contentEl.innerText.trim() : '',
                    time: timeEl ? timeEl.innerText.trim() : ''
                  });
                });
                return events;
              });
              console.log("Activity Timeline:", activityTimeline);
              await safeScreenshot(page, `./screenshots/pubby_activity_extracted_${Date.now()}.png`);

              // Stage 10: Find a Kindle Unlimited book card, click it, then click "Pick Book".
              console.log("Scanning for Kindle Unlimited book cards...");
              // Updated XPath to find a card that contains 'Kindle Unlimited' text or an image path indicating KU
              const kuCardHandle = await page.evaluateHandle((xpath) => {
                const results = [];
                const query = document.evaluate(xpath, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
                for (let i = 0; i < query.snapshotLength; i++) {
                  results.push(query.snapshotItem(i));
                }
                return results;
              }, "//div[contains(@class, 'card') and (.//div[contains(@class, 'label') and text()='Kindle Unlimited'] or .//img[contains(@src, 'kindle-unlimited.png')])]");

              const kuCardProps = await kuCardHandle.getProperties();
              const kuCardElements = [];
              for (const property of kuCardProps.values()) {
                const element = property.asElement();
                if (element)
                  kuCardElements.push(element);
              }

              if (kuCardElements.length > 0) {
                console.log("Kindle Unlimited book card found. Clicking the card...");
                await kuCardElements[0].click(); // Click the first found Kindle Unlimited card
                await sleep(2000);
                await safeScreenshot(page, `./screenshots/pubby_ku_card_clicked_${Date.now()}.png`);

                console.log("Looking for 'Pick Book' button...");
                // XPath for 'Pick Book' remains the same as it's a general action
                const pickBookHandle = await page.evaluateHandle((xpath) => {
                  const results = [];
                  const query = document.evaluate(xpath, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
                  for (let i = 0; i < query.snapshotLength; i++) {
                    results.push(query.snapshotItem(i));
                  }
                  return results;
                }, "//div[contains(@class, 'action') and contains(@class, 'action-blue') and normalize-space(text())='Pick Book']");
                const pickBookProps = await pickBookHandle.getProperties();
                const pickBookElements = [];
                for (const property of pickBookProps.values()) {
                  const element = property.asElement();
                  if (element)
                    pickBookElements.push(element);
                }
                if (pickBookElements.length > 0) {
                  console.log("'Pick Book' button found. Clicking...");
                  await pickBookElements[0].click();
                  await sleep(2000);
                  await safeScreenshot(page, `./screenshots/pubby_pick_book_clicked_${Date.now()}.png`);
                } else {
                  console.log("'Pick Book' button not found after clicking the Kindle Unlimited book card.");
                }
              } else {
                console.log("No Kindle Unlimited book card found.");
              }
            } catch (error) {
              console.error("Script error:", error.message);
            } finally {
              // Always save the final HTML of the browse page.
              if (page) {
                try {
                  console.log("Saving final HTML of the browse page...");
                  const finalHtml = await page.content();
                  const htmlFile = `./screenshots/pubby_final_page_${Date.now()}.html`;
                  fs.writeFileSync(htmlFile, finalHtml);
                  console.log(`Final HTML saved: ${htmlFile}`);
                } catch (e) {
                  console.error("Failed to save final HTML:", e.message);
                }
              }
              if (browser) {
                await browser.close();
              }
            }
          }

          async function run() {
            const loginUrl = process.env.PUBBY_LOGIN_URL || "https://account.pubby.co/login";
            const browseUrl = process.env.PUBBY_BROWSE_URL || "https://app.pubby.co/#/browse";
            const username = process.env.PUBBY_USERNAME;
            const password = process.env.PUBBY_PASSWORD;

            if (!username || !password) {
              console.error("Username and password must be provided via environment variables.");
              process.exit(1);
            }
            await loginAndBrowse(loginUrl, browseUrl, username, password);
          }

          run().catch(error => {
            console.error("Script failed:", error.message);
            process.exit(1);
          });
          EOL

      - name: Run Puppeteer script
        env:
          PUBBY_LOGIN_URL: "https://account.pubby.co/login"
          PUBBY_BROWSE_URL: "https://app.pubby.co/#/browse"
          PUBBY_USERNAME: ${{ secrets.PUBBY_USERNAME }}
          PUBBY_PASSWORD: ${{ secrets.PUBBY_PASSWORD }}
        run: |
          echo "Logging in to: $PUBBY_LOGIN_URL and navigating to: $PUBBY_BROWSE_URL"
          node scripts/pubby-login-and-browse.js | tee script_output.log

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pubby-debug-artifacts
          path: |
            screenshots/
            *.log
          retention-days: 7
